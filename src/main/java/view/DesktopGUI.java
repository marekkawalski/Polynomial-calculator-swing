package view;

import java.awt.Dimension;
import java.awt.Toolkit;
import java.io.File;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.List;
import java.util.stream.Stream;
import javax.swing.*;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.DefaultTableModel;
import math.PolynomialException;
import math.PolynomialMath;

/**
 * Main class that is responsible for managing GUI. Input of polynomial is as
 * follows: type polynomial factors (each must be separated by a space) and at
 * the end type value of x for which polynomial is to be calculated.
 *
 * @author Marek Kawalski
 * @version 2.1
 */
public class DesktopGUI extends javax.swing.JFrame {

    /**
     * Model of results table
     */
    private final DefaultTableModel resultsTableModel;

    /**
     * Creates new form DesktopGUI
     *
     * @param args command line arguments (optional)
     */
    public DesktopGUI(String args[]) {
        initComponents();
        centerWindow();
        resultsTableModel = (DefaultTableModel) resultsTable.getModel();
        initInputFieldWithCommandLineArguments(args);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold default state="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        inputField = new javax.swing.JTextField();
        // Variables declaration - do not modify//GEN-BEGIN:variables
        javax.swing.JButton buttonCalculate = new javax.swing.JButton();
        javax.swing.JLabel jLabel1 = new javax.swing.JLabel();
        javax.swing.JScrollPane jScrollPane2 = new javax.swing.JScrollPane();
        resultsTable = new javax.swing.JTable();
        javax.swing.JButton buttonEraseTable = new javax.swing.JButton();
        javax.swing.JButton buttonEraseInput = new javax.swing.JButton();
        javax.swing.JMenuBar jMenuBar1 = new javax.swing.JMenuBar();
        javax.swing.JMenu jMenu1 = new javax.swing.JMenu();
        javax.swing.JMenuItem saveFile = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Polynomial Calculator");
        setLocation(new java.awt.Point(0, 0));
        setResizable(false);

        inputField.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        buttonCalculate.setText("Calculate");
        buttonCalculate.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        buttonCalculate.addActionListener(this::buttonCalculateActionPerformed);

        jLabel1.setText("Type polynomial values");
        jLabel1.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jLabel1.setVerifyInputWhenFocusTarget(false);

        resultsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Polynomial", "Polynomial value", "Polynomial First derivative", "Polynomial first derivative value"
            }
        ) {
            final Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            final boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        resultsTable.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jScrollPane2.setViewportView(resultsTable);

        buttonEraseTable.setText("Erase table");
        buttonEraseTable.addActionListener(this::buttonEraseTableActionPerformed);

        buttonEraseInput.setText("Erase input");
        buttonEraseInput.addActionListener(this::buttonEraseInputActionPerformed);

        jMenu1.setText("File");

        saveFile.setText("Save");
        saveFile.addActionListener(this::saveFileActionPerformed);
        jMenu1.add(saveFile);

        jMenuBar1.add(jMenu1);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(85, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(buttonEraseTable, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.CENTER, javax.swing.GroupLayout.PREFERRED_SIZE, 757, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(javax.swing.GroupLayout.Alignment.CENTER, layout.createSequentialGroup()
                        .addComponent(buttonCalculate)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(buttonEraseInput))
                    .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.CENTER, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(inputField, javax.swing.GroupLayout.Alignment.CENTER, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(80, 80, 80))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(6, 6, 6)
                .addComponent(inputField, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(buttonCalculate)
                    .addComponent(buttonEraseInput))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 41, Short.MAX_VALUE)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 244, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(buttonEraseTable)
                .addGap(7, 7, 7))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Method which reacts to button calculate click. It parses input from user,
     * creates instance of model class and writes results to a table.
     *
     * @param evt button click event
     */
    private void buttonCalculateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonCalculateActionPerformed
        //get text from input field and convert it
        String inputNumbers = inputField.getText();
        Stream<String> givenNumbersArray = Stream.of(inputNumbers.split(" "));
        List<String> argsStringTab = new ArrayList<>();
        givenNumbersArray.forEach(argsStringTab::add);
        //check if input is correct
        for (String arg : argsStringTab) {
            if (!(arg.matches("\\d+") || arg.matches("-\\d+"))) {
                JOptionPane.showMessageDialog(new JFrame(), "Incorrect input", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }
        }
        //parse to Integer
        List<Integer> argsIntegerTab = new ArrayList<>();
        argsStringTab.stream()
                .mapToInt(Integer::parseInt)
                .forEach(argsIntegerTab::add);

        //handle data from model
        PolynomialMath polynomialMath = new PolynomialMath();
        int calculatedValue;
        int calculatedFirstDerivativeValue;
        List<Integer> listOfFirstDerivativeFactors;
        //check if number of arguments is correct
        if (argsIntegerTab.size() < 2) {
            JOptionPane.showMessageDialog(new JFrame(), "Not enough arguments!", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        try {
            calculatedValue = polynomialMath.calculatePolynomialValue(argsIntegerTab);
            listOfFirstDerivativeFactors = polynomialMath.calculatePolynomialFirstDerivative(argsIntegerTab);
            calculatedFirstDerivativeValue = polynomialMath.calculatePolynomialFirstDerivativeValue(listOfFirstDerivativeFactors);
            List<String> listOfTableContents = new ArrayList<>();
            listOfTableContents.add(polynomialOnScreen(argsIntegerTab));
            listOfTableContents.add("y(" + argsIntegerTab.get(argsIntegerTab.size() - 1) + ")= " + calculatedValue);
            listOfTableContents.add(firstDerivativeOnScreen(listOfFirstDerivativeFactors));
            listOfTableContents.add("y'(" + listOfFirstDerivativeFactors.get(listOfFirstDerivativeFactors.size() - 1) + ")= " + calculatedFirstDerivativeValue);
            listOfTableContents.toArray();
            String[] arrayOfTableContents = listOfTableContents.toArray(new String[0]);
            resultsTableModel.addRow(arrayOfTableContents);
        } catch (PolynomialException myException) {
            JOptionPane.showMessageDialog(new JFrame(), myException.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
    }//GEN-LAST:event_buttonCalculateActionPerformed
    }

    /**
     * Method which deletes table contents on button erase click
     *
     * @param evt button erase click
     */
    private void buttonEraseTableActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonEraseTableActionPerformed
        int rowCount = resultsTableModel.getRowCount();
        if (rowCount == 0) {
            JOptionPane.showMessageDialog(new JFrame(), "Nothing to delete!", "Information", JOptionPane.INFORMATION_MESSAGE);
        } else {
            for (int i = rowCount - 1; i >= 0; i--) {
                resultsTableModel.removeRow(i);
            }
        }
    }//GEN-LAST:event_buttonEraseTableActionPerformed

    /**
     * Method is responsible for deleting text from input field
     *
     * @param evt button erase input event
     */
    private void buttonEraseInputActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonEraseInputActionPerformed
        if (inputField.getText().equals("")) {
            JOptionPane.showMessageDialog(new JFrame(), "Nothing to erase!", "Information", JOptionPane.INFORMATION_MESSAGE);
        } else {
            inputField.setText("");
        }
    }//GEN-LAST:event_buttonEraseInputActionPerformed

    /**
     * Method is responsible for saving contents of table into file
     *
     * @param evt button save event performed
     */
    private void saveFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveFileActionPerformed
        int rowCount = resultsTableModel.getRowCount();
        if (rowCount == 0) {
            JOptionPane.showMessageDialog(new JFrame(), "Nothing to save!", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        }
        final JFileChooser fileChooser = new JFileChooser();
        FileNameExtensionFilter filter = new FileNameExtensionFilter("*.txt", "txt");
        fileChooser.setFileFilter(filter);
        int returnVal = fileChooser.showOpenDialog(this);
        if (returnVal != JFileChooser.APPROVE_OPTION) {
            return;
        }
        try {
            File file = fileChooser.getSelectedFile();
            try ( PrintWriter fileStream = new PrintWriter(file)) {
                for (int row = 0; row < resultsTableModel.getRowCount(); row++) {
                    for (int col = 0; col < resultsTableModel.getColumnCount(); col++) {
                        fileStream.print(resultsTableModel.getColumnName(col));
                        fileStream.print(": ");
                        fileStream.println(resultsTableModel.getValueAt(row, col));
                    }
                    fileStream.print("<-------------------->\n");
                }
            }
        } catch (IOException e) {
        }
    }//GEN-LAST:event_saveFileActionPerformed

    /**
     * Method which returns polynomial equation on screen
     *
     * @param argsIntegerTab list of first polynomial factors
     * @return polynomial equation as String
     */
    private String polynomialOnScreen(List<Integer> argsIntegerTab) {
        int length = argsIntegerTab.size() - 1;
        int degree = argsIntegerTab.size() - 2;
        StringBuilder polynomial;
        polynomial = new StringBuilder("y(x)= ");
        for (int i = 0; i < length; i++) {
            if (degree - i == 1) {
                polynomial.append(argsIntegerTab.get(i).toString()).append("x");
            } else if (degree - i == 0) {
                polynomial.append(argsIntegerTab.get(i).toString());
            } else {
                polynomial.append(argsIntegerTab.get(i).toString()).append("x^").append(degree - i);
            }
            if (i < length - 1) {
                polynomial.append(" + ");
            }
        }
        return polynomial.toString();
    }

    /**
     * Method which returns first derivative equation on screen
     *
     * @param listOfFactors list of first derivative factors
     * @return first derivative equation as String
     */
    private String firstDerivativeOnScreen(List<Integer> listOfFactors) {
        int length = listOfFactors.size() - 1;
        int degree = listOfFactors.size() - 2;
        StringBuilder firstDerivative;
        firstDerivative = new StringBuilder("y'(x)= ");
        for (int i = 0; i < length; i++) {
            if (degree - i == 1) {
                firstDerivative.append(listOfFactors.get(i).toString()).append("x");
            } else if (degree - i == 0) {
                firstDerivative.append(listOfFactors.get(i).toString());
            } else {
                firstDerivative.append(listOfFactors.get(i).toString()).append("x^").append(degree - i);
            }
            if (i < length - 1) {
                firstDerivative.append(" + ");
            }
        }
        return firstDerivative.toString();
    }

    /**
     * Method which centers any window. It's used to center main window.
     */
    private void centerWindow() {
        Dimension dimension = Toolkit.getDefaultToolkit().getScreenSize();
        int x = (int) ((dimension.getWidth() - this.getWidth()) / 2);
        int y = (int) ((dimension.getHeight() - this.getHeight()) / 2);
        this.setLocation(x, y);
    }

    /**
     * Method which sets programs arguments in input field.
     *
     * @param args programs arguments
     */
    private void initInputFieldWithCommandLineArguments(String[] args) {
        StringBuilder text = new StringBuilder();
        for (String arg : args) {
            text.append(arg).append(" ");
        }
        inputField.setText(text.toString());
    }

    /**
     * main method which creates desktop GUI
     *
     * @param args the command line arguments
     */
    public static void main(String[] args) {

        /* Set the Nimbus look and feel */
        //<editor-fold default state="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(DesktopGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> new DesktopGUI(args).setVisible(true));
    }

    private javax.swing.JTextField inputField;
    private javax.swing.JTable resultsTable;
    // End of variables declaration//GEN-END:variables
}
